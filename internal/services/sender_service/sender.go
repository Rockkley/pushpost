package sender

import (
	"encoding/json"
	"fmt"
	"log"

	"github.com/segmentio/kafka-go"
)

// EmailMessage ‚Äî —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
type EmailMessage struct {
	Type  string `json:"type"` // "otp", "reset", "welcome"
	Email string `json:"email"`
	OTP   string `json:"otp,omitempty"` // –¢–æ–ª—å–∫–æ –¥–ª—è OTP
}

// –ö–∞—Ä—Ç–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ email
var handlers = map[string]func(EmailMessage){
	"otp":     sendOTPEmail,
	"reset":   sendResetPasswordEmail,
	"welcome": sendWelcomeEmail,
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ OTP
func sendOTPEmail(msg EmailMessage) {
	fmt.Printf("üì® –û—Ç–ø—Ä–∞–≤–ª—è–µ–º OTP %s –Ω–∞ %s\n", msg.OTP, msg.Email)
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Reset Password
func sendResetPasswordEmail(msg EmailMessage) {
	fmt.Printf("üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –Ω–∞ %s\n", msg.Email)
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Welcome Email
func sendWelcomeEmail(msg EmailMessage) {
	fmt.Printf("üéâ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ –Ω–∞ %s\n", msg.Email)
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Kafka-—Å–æ–æ–±—â–µ–Ω–∏–π
func HandleEmailMessage(msg kafka.Message) {
	var data EmailMessage
	err := json.Unmarshal(msg.Value, &data)
	if err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:", err)
		return
	}

	// –í—ã–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
	if handler, exists := handlers[data.Type]; exists {
		handler(data)
	} else {
		log.Println("‚ö† –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø email:", data.Type)
	}
}
